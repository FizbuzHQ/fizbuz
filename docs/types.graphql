# Defines the path information for RESTful resources
# url - a unique string used when constructing a URL path to the resource
# parent (optional) - the resource path of the parent resource
directive @rest (url: String, parent: String = "none") on OBJECT

directive @prefix (value: String) on OBJECT

directive @join (parent: String child: String) on OBJECT

directive @pk (key: String) on FIELD_DEFINITION

directive @sk (key: String) on FIELD_DEFINITION

directive @data (key: String) on FIELD_DEFINITION

directive @private  on FIELD_DEFINITION

directive @unique  on FIELD_DEFINITION

interface Node {
  type:                   String!
  created:                String
  updated:                String
  deleted:				String
}

interface Connection {
  edges:                  [Edge!]
  count:                  Int!
}

interface Edge {
  type:                   String!
  node:                   Node
  created:                String
  updated:                String
}

# A user account
type Account implements Node @rest(url: "accounts") @prefix(value: "AC") {
  accountID:              ID!         					@pk(key: "accountID")
  type:                   String!     					@sk(key: "type")
  nickname:               String!     					@unique
  email:                  String!     					@unique @private 
  name:                   String
  location:               String
  image:                  String
  about:                  String
  pronouns:               String
  published:				      Boolean!
  previewImage:			      String
  productEmail:			      Boolean
  promotionalEmail:		    Boolean
  identitiesConnection:   AccountIdentitiesConnection
  toolsConnection:        AccountToolsConnection
  traitsConnection:       AccountTraitsConnection
  experiencesConnection:  AccountExperiencesConnection
  activitiesConnection:   AccountActivitiesConnection
  connectionsConnection:	AccountConnectionsConnection
  created:                String							  @data(key: "created")
  updated:                String
  deleted:				        String
}

# A social identity (LinkedIn, Twitter, etc) for an Account
type Identity implements Node @rest(url: "identities", parent: "accounts") @prefix(value: "ID") {
  identityID:             ID!         @sk(key: "identityID")
  account:                Account!    @pk(key: "accountID")
  sub:                    String
  type:                   String!
  service:                String!
  nickname:               String!
  picture:                String
  created:                String		  @data(key: "created")
  updated:                String
  deleted:				        String
}

type OpenGraph implements Node @rest(url: "opengraph") @prefix(value: "OG"){
  ogID:         ID!         @pk(key: "ogID")
  type:         String!     @sk(key: "type")
  url:					String!		  @unique
  urlhash:		  String!		  @unique
  title:				String
  image:				String
  description: 	String
  created:      String		  @data(key: "created")
  updated:      String
  deleted:			String
}

# A tool that developers use to build software
type Tool implements Node @rest(url: "tools") @prefix(value: "TL") {
  toolID:                 ID!         @pk(key: "toolID")
  type:                   String!     @sk(key: "type")
  name:                   String!  	  @unique
  kind:                   String!
  description:            String
  url:                    String
  parent:                 Tool
  verified:				        Boolean!
  created:                String		  @data(key: "created")
  updated:                String
  deleted:				        String
}

type Tag implements Node @rest(url: "tags") @prefix(value: "TG") {
  tagID:                 	ID!       @pk(key: "tagID")
  type:                   String!   @sk(key: "type")
  name:                   String!  	@unique
  kind:                   String!
  verified:				        Boolean!
  created:                String		@data(key: "created")
  updated:                String
  deleted:				        String
}

type Trait implements Node @rest(url: "traits") @prefix(value: "TR") {
  traitID:          		  ID!         @pk(key: "traitID")
  type:                   String!     @sk(key: "type")
  kind:                   String!
  name:                   String!
  description:            String
  created:                String		  @data(key: "created")
  updated:                String
  deleted:				        String
}

type Place implements Node @rest(url: "places") @prefix(value: "PL") {
  placeID:				ID!			  @pk(key: "placeID")
  type:           String!   @sk(key: "type")
  kind:           String!
  name:					  String!		@unique
  url:					  String
  description:    String
  verified:				Boolean!
  created:        String		@data(key: "created")
  updated:        String
  deleted:				String
}

type Experience implements Node @rest(url: "experiences", parent: "accounts") @prefix(value: "EX") {
  type:                   String!
  experienceID: 	        ID!         @sk(key: "experienceID")
  account:                Account!    @pk(key: "accountID")
  place:   				        Place!
  kind:					          String!
  title:					        String
  start:              	  String
  end:              		  String
  comment:				        String
  published:				      Boolean!
  created:                String		  @data(key: "created")
  updated:                String
  deleted:				        String
}

type AccountConnection implements Node @rest(url: "connections", parent: "accounts") @prefix(value: "CN") {
  type:                   String!
  connectionID: 	        ID!         @sk(key: "connectionID")
  account:                Account!    @pk(key: "accountID")
  pin:					          String
  connected:   			      Account
  comment:				        String
  created:                String		  @data(key: "created")
  updated:                String
  deleted:				        String
}

type Activity implements Node @rest(url: "activities", parent: "accounts") @prefix(value: "AT") {
  activityID: 	        ID!         @sk(key: "activityID")
  account:              Account!    @pk(key: "accountID")
  type:                 String!
  kind:                 String!
  title:                String!
  description:   			  String
  image:					      String
  url:		              String
  date:              		String
  published:				    Boolean!
  created:              String		@data(key: "created")
  updated:              String
  deleted:				      String
}

type Company implements Node @rest(url: "company") @prefix(value: "CO") {
  companyID:				  ID!			    @pk(key: "companyID")
  type:               String!     @sk(key: "type")
  owner:					    Account!
  description:   		  String
  traitsConnection:   CompanyTraitsConnection
  created:            String		  @data(key: "created")
  updated:            String
  deleted:				    String
}

type Workplace implements Node @rest(url: "workplaces") @prefix(value: "WP") {
  workplaceID:			  ID!			  @pk(key: "workplaceID")
  type:               String!   @sk(key: "type")
  owner:					    Account!
  company:				    Company!
  address:  	    		String!
  description:   			String
  traitsConnection:   WorkplaceTraitsConnection
  created:            String		@data(key: "created")
  updated:            String
  deleted:				    String
}

type Team implements Node @rest(url: "teams") @prefix(value: "TM") {
  teamID:					  ID!			  @pk(key: "teamID")
  type:             String!   @sk(key: "type")
  owner:					  Account!
  company:				  Company!
  name:  	          String!
  description:   		String
  traitsConnection: TeamTraitsConnection
  created:          String		@data(key: "created")
  updated:          String
  deleted:				  String
}

type Role implements Node @rest(url: "roles") @prefix(value: "RL") {
  roleID:					    ID!			  @pk(key: "roleID")
  type:               String!   @sk(key: "type")
  owner:					    Account!
  company:				    Company!
  name:  	            String!
  description:   			String
  traitsConnection:   RoleTraitsConnection
  created:            String		@data(key: "created")
  updated:            String
  deleted:				    String
}

type Job implements Node @rest(url: "jobs") @prefix(value: "JB") {
  jobID:					  ID!			  @pk(key: "jobID")
  type:             String!   @sk(key: "type")
  kind:             String!
  owner:					  Account!
  company:				  Company!
  role:					    Role!
  team:					    Team
  description:   	  String
  image:					  String
  published:				Boolean!
  created:          String		@data(key: "created")
  updated:          String
  deleted:				  String
}

type AccountIdentitiesConnection implements Connection {
  edges:                  [AccountIdentitiesEdge!]
  count:                  Int!
}

type AccountIdentitiesEdge implements Edge @join(parent: "Account") {
  type:                   String!
  node:                   Identity!
  created:                String
  updated:                String
}

type AccountConnectionsConnection implements Connection {
  edges:                  [AccountConnectionsEdge!]
  count:                  Int!
}

type AccountConnectionsEdge implements Edge @join(parent: "Account") {
  type:                   String!
  node:                   AccountConnection!
  created:                String
  updated:                String
}

type AccountToolsConnection implements Connection {
  edges:                  [AccountToolsEdge!]
  count:                  Int!
}

type AccountToolsEdge implements Edge @join(parent: "Account") {
  type:                   String!
  node:                   Tool!
  level:                  Int
  comment:				        String
  published:				      Boolean!
  created:                String
  updated:                String
}

type AccountTagsConnection implements Connection {
  edges:                  [AccountTagsEdge!]
  count:                  Int!
}

type AccountTagsEdge implements Edge @join(parent: "Account") {
  type:                   String!
  node:                   Tag!
  published:				      Boolean!
  created:                String
  updated:                String
}

type AccountTraitsConnection implements Connection {
  edges:                  [AccountTraitsEdge!]
  count:                  Int!
}

type AccountTraitsEdge implements Edge @join(parent: "Account") {
  type:                   String!
  node:                   Trait!
  feels:					        Int!
  comment:				        String
  published:				      Boolean!
  created:                String
  updated:                String
}

type AccountExperiencesConnection implements Connection {
  edges:                  [AccountExperiencesEdge!]
  count:                  Int!
}

type AccountExperiencesEdge implements Edge @join(parent: "Account") {
  type:                   String!
  node:                   Experience!
  created:                String
  updated:                String
}

type AccountActivitiesConnection implements Connection {
  edges:                  [AccountActivitiesEdge!]
  count:                  Int!
}

type AccountActivitiesEdge implements Edge @join(parent: "Account") {
  type:                   String!
  node:                   Activity!
  created:                String
  updated:                String
}

type CompanyTraitsConnection implements Connection {
  edges:                  [CompanyTraitsEdge!]
  count:                  Int!
}

type CompanyTraitsEdge implements Edge @join(parent: "Company") {
  type:                   String!
  node:                   Trait!
  comment:				        String
  published:				      Boolean!
  created:                String
  updated:                String
}

type TeamTraitsConnection implements Connection {
  edges:                  [TeamTraitsEdge!]
  count:                  Int!
}

type TeamTraitsEdge implements Edge @join(parent: "Team") {
  type:                   String!
  node:                   Trait!
  comment:				        String
  published:				      Boolean!
  created:                String
  updated:                String
}

type WorkplaceTraitsConnection implements Connection {
  edges:                  [WorkplaceTraitsEdge!]
  count:                  Int!
}

type WorkplaceTraitsEdge implements Edge @join(parent: "Workplace") {
  type:                   String!
  node:                   Trait!
  comment:				        String
  published:				      Boolean!
  created:                String
  updated:                String
}

type RoleTraitsConnection implements Connection {
  edges:                  [RoleTraitsEdge!]
  count:                  Int!
}

type RoleTraitsEdge implements Edge @join(parent: "Role") {
  type:                   String!
  node:                   Trait!
  comment:				        String
  published:				      Boolean!
  created:                String
  updated:                String
}

type Query {
  account(nickname: String): Account
  accountIDByNickname(nickname: String): String
  accountIDBySub(sub: String): String
  accountIDByEmail(email: String): String
  accountsByPlaceID(placeID: String): [Account]
  connectionsByAccountID(accountID: String): [AccountConnection]
}
